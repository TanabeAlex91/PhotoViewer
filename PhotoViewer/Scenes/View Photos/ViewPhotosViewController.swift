//
//  ViewPhotosListViewController.swift
//  PhotoViewer
//
//  Created by Alex Tanabe on 11/12/16.
//  Copyright (c) 2016 Alex Tanabe. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import PKHUD
import AlamofireImage

protocol ViewPhotosViewControllerInput
{
    func displayPhotoSearchServiceError(_ error : NSError)
    func displayResultsFromSearch(_ searchResults : ViewPhotos.SearchPhotos.SearchResults)
}

protocol ViewPhotosViewControllerOutput
{
    func searchPhotosForTerm(request: ViewPhotos.SearchPhotos.Request)
}

class ViewPhotosViewController: UICollectionViewController
{
    var output: ViewPhotosViewControllerOutput!
    var router: ViewPhotosRouter!
    
    fileprivate let photoCellReuseIdentifier = "PhotoCell"
    fileprivate let sectionInsets = UIEdgeInsets(top: 20.0, left: 10.0, bottom: 20.0, right: 10.0)
    fileprivate var searches : [ViewPhotos.SearchPhotos.SearchResults] = []
    fileprivate let photosWorker = FlickrPhotosWorker()
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        ViewPhotosConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
}

// MARK: - Private
private extension ViewPhotosViewController {
    func photoForIndexPath(_ indexPath: IndexPath) -> FlickrPhoto {
        let searchResult : ViewPhotos.SearchPhotos.SearchResults = searches[(indexPath as NSIndexPath).section]
        let photo = searchResult.resultPhotos[(indexPath as NSIndexPath).row]
        return photo
    }
}


// MARK: - UICollectionViewDataSource
extension ViewPhotosViewController {
    
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        return searches.count
    }
    
    override func collectionView(_ collectionView: UICollectionView,
                                 numberOfItemsInSection section: Int) -> Int {
        return searches[section].resultPhotos.count
    }
    
    override func collectionView(_ collectionView: UICollectionView,
                                 cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: photoCellReuseIdentifier,
                                                      for: indexPath) as! PhotoCell
        let flickrPhoto = photoForIndexPath(indexPath)
        cell.backgroundColor = UIColor.white
        
        if let imageURL = flickrPhoto.imageURL() {
            cell.imageView.af_setImage(
                withURL: imageURL,
                placeholderImage: nil,
                filter: nil,
                imageTransition: .crossDissolve(0.4)
            )
        }
        
        return cell
    }
}

// MARK: - UICollectionViewDelegateFlowLayout
extension ViewPhotosViewController : UICollectionViewDelegateFlowLayout {

    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let screenSize = UIScreen.main.bounds.size
        let viewMinDimension = min(screenSize.width, screenSize.height)
        let itemsPerRow : CGFloat = 4.0;
        let paddingSpace = sectionInsets.left * (itemsPerRow + 1)
        let availableWidth = viewMinDimension - paddingSpace
        let widthPerItem = availableWidth / itemsPerRow
        return CGSize(width: widthPerItem, height: widthPerItem)
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        insetForSectionAt section: Int) -> UIEdgeInsets {
        return sectionInsets
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return sectionInsets.left
    }
}

// MARK: - UITextFieldDelegate
extension ViewPhotosViewController : UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {

        if (textField.text != "") {
            PKHUD.sharedHUD.contentView = PKHUDProgressView(title: "Fetching...", subtitle: "")
            PKHUD.sharedHUD.show()
            
            self.output.searchPhotosForTerm(request: ViewPhotos.SearchPhotos.Request(searchTerm: textField.text!))
        }
        
        textField.resignFirstResponder()
        return true
    }
}

// MARK: - ViewPhotosViewControllerInput
extension ViewPhotosViewController : ViewPhotosViewControllerInput {
    
    func displayPhotoSearchServiceError(_ error : NSError) {
        PKHUD.sharedHUD.hide(afterDelay: 1.0)
        router.showAlertForError(error)
    }
    
    func displayResultsFromSearch(_ searchResults : ViewPhotos.SearchPhotos.SearchResults) {
        PKHUD.sharedHUD.hide(afterDelay: 1.0)
        self.searches.insert(searchResults, at: 0)
        self.collectionView?.reloadData()
    }
}

