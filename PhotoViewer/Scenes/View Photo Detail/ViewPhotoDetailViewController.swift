//
//  ViewPhotoDetailViewController.swift
//  PhotoViewer
//
//  Created by Alex Tanabe on 11/16/16.
//  Copyright (c) 2016 Alex Tanabe. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class ViewPhotoDetailViewController: UIViewController {
    
    @IBOutlet weak var scrollView: UIScrollView!
    fileprivate var imageView: UIImageView!
    
    var router: ViewPhotoDetailRouter!

    var photoSourceImage : UIImage!
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        ViewPhotoDetailConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupViews()
        setupGestureRecognizer()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        setZoomScale()
    }
    
    // MARK: - Display logic
    
    func setupViews() {
        self.imageView = UIImageView(image: self.photoSourceImage)
        self.scrollView .addSubview(self.imageView)
        self.navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.action, target: self, action: #selector(ViewPhotoDetailViewController.share))
    }
    
    // MARK: - IBActions
    
    @IBAction func share(_ sender: UIBarButtonItem) {
        self.router.showSharePopupForPhotoImage(self.imageView.image!, from: sender)
    }

}

// MARK: - UIScrollViewDelegate
extension ViewPhotoDetailViewController: UIScrollViewDelegate {
    func viewForZooming(in scrollView: UIScrollView) -> UIView? {
        return self.imageView
    }
    
    func scrollViewDidZoom(_ scrollView: UIScrollView) {
        updateScrollInset()
    }
}


// MARK: - Private
extension ViewPhotoDetailViewController {
    
    // MARK: - Zoom Handling
    fileprivate func setZoomScale() {
        if let size = imageView.image?.size {
            let wrate = scrollView.frame.width / size.width
            let hrate = scrollView.frame.height / size.height
            let rate = min(wrate, hrate, 1)
            imageView.frame.size = CGSize(width: size.width * rate, height: size.height * rate)
            scrollView.contentSize = imageView.frame.size
            updateScrollInset()
        }
    }
    
    fileprivate func updateScrollInset() {
        scrollView.contentInset = UIEdgeInsetsMake(
            max((scrollView.frame.height - imageView.frame.height)/2, 0),
            max((scrollView.frame.width - imageView.frame.width)/2, 0),
            0,
            0
        );
    }
    
    //MARK: - Gesture Handling
    fileprivate func setupGestureRecognizer() {
        let doubleTap = UITapGestureRecognizer(target: self, action: #selector(self.handleDoubleTap(recognizer:)))
        doubleTap.numberOfTapsRequired = 2
        self.scrollView.addGestureRecognizer(doubleTap)
    }
    
    @objc fileprivate func handleDoubleTap(recognizer: UITapGestureRecognizer) {
        
        if (self.scrollView.zoomScale > self.scrollView.minimumZoomScale) {
            self.scrollView.setZoomScale(self.scrollView.minimumZoomScale, animated: true)
        } else {
            self.scrollView.setZoomScale(self.scrollView.maximumZoomScale, animated: true)
        }
    }
}
