//
//  PhotosWorker.swift
//  PhotoViewer
//
//  Created by Alex Tanabe on 11/13/16.
//  Copyright (c) 2016 Alex Tanabe. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Alamofire
import SwiftyJSON

let apiKey = "c72148b6364a09ee78e7868021dd29b4"

class FlickrPhotosWorker {
    
    let processingQueue = OperationQueue()
    
    func searchPhotosForTerm(_ searchTerm: String, completion : @escaping (_ results: FlickrSearchResults?, _ error : NSError?) -> Void){
        
        guard let searchURL = flickrSearchURLStringForSearchTerm(searchTerm) else {
            completion(nil, ErrorFactory.createMalformedURLError())
            return
        }
        
        Alamofire.request(searchURL).responseJSON { response in
            switch response.result {
            case .success(let value):
                let resultJSON = JSON(value)
                
                guard let status = resultJSON["stat"].string else {
                    completion(nil, ErrorFactory.createServiceError())
                    return
                }
                
                if status == "ok" {
                    var flickrPhotos = [FlickrPhoto]()
                    
                    for (_,photoJSON):(String, JSON) in resultJSON["photos"]["photo"] {
                        
                        guard let photoID = photoJSON["id"].string,
                            let farm = photoJSON["farm"].int ,
                            let server = photoJSON["server"].string ,
                            let secret = photoJSON["secret"].string else {
                                break
                        }
                        
                        let flickrPhoto = FlickrPhoto(photoID: photoID, farm: farm, server: server, secret: secret)
                        flickrPhotos.append(flickrPhoto)
                    }
                    
                    completion(FlickrSearchResults(searchTerm: searchTerm, searchResults: flickrPhotos), nil)
                } else {
                    completion(nil, ErrorFactory.createServiceError())
                }
            case .failure:
                completion(nil, ErrorFactory.createServiceError())
            }
        }
    }
    
    fileprivate func flickrSearchURLStringForSearchTerm(_ searchTerm:String) -> String? {
        
        guard let escapedTerm = searchTerm.addingPercentEncoding(withAllowedCharacters: CharacterSet.alphanumerics) else {
            return nil
        }
        
        let URLString = "https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=\(apiKey)&text=\(escapedTerm)&per_page=20&format=json&nojsoncallback=1"
        
        return URLString
    }
}
